"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[329],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return g}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),g=a,f=m["".concat(l,".").concat(g)]||m[g]||p[g]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},533:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),i=["components"],s={},l="Create Generator",c={unversionedId:"create-generator/create-generator",id:"create-generator/create-generator",title:"Create Generator",description:"Anatomy of a Generator",source:"@site/docs/create-generator/create-generator.md",sourceDirName:"create-generator",slug:"/create-generator/",permalink:"/Grit/docs/create-generator/",editUrl:"https://github.com/TimCrooker/Grit/edit/master/docs/docs/create-generator/create-generator.md",tags:[],version:"current",frontMatter:{}},u=[{value:"Anatomy of a Generator",id:"anatomy-of-a-generator",children:[{value:"Template",id:"template",children:[],level:3},{value:"Generator File",id:"generator-file",children:[],level:3}],level:2},{value:"Generator Structure",id:"generator-structure",children:[{value:"Example",id:"example",children:[{value:"prompts",id:"prompts",children:[],level:4}],level:3}],level:2}],p={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-generator"},"Create Generator"),(0,o.kt)("h2",{id:"anatomy-of-a-generator"},"Anatomy of a Generator"),(0,o.kt)("h3",{id:"template"},"Template"),(0,o.kt)("p",null,"The template directory contains all of the main files that a generator has access to at runtime. The file-tree structure of the contents of this directory will be directly reflected by the output of the generator to the specified output directory."),(0,o.kt)("p",null,"The simplest possible generator consists nothing but a template directory. In this case grit will use a default configuration that simply copies the files to the destination directory and performs no further manipulations."),(0,o.kt)("p",null,"There are no limits on the type or number of files or directories that can be included"),(0,o.kt)("h3",{id:"generator-file"},"Generator File"),(0,o.kt)("h2",{id:"generator-structure"},"Generator Structure"),(0,o.kt)("p",null,"This is the file structure of your new generator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\ud83d\udce6grit-example\n\u2523 \ud83d\udcc2template\n \u2503 \u2523 \ud83d\udcdcgitignore\n \u2503 \u2523 \ud83d\udcdcLICENSE\n \u2503 \u2517 \ud83d\udcdcREADME.md\n \u2523 \ud83d\udcc2test\n \u2503 \u2523 \ud83d\udcc2__snapshots__\n \u2503 \u2503 \u2517 \ud83d\udcdctest.ts.snap\n \u2503 \u2517 \ud83d\udcdctest.ts\n \u2523 \ud83d\udcdc.gitignore\n \u2523 \ud83d\udcdcbabel.config.js\n \u2523 \ud83d\udcdcgenerator.ts\n \u2523 \ud83d\udcdcjest.config.js\n \u2523 \ud83d\udcdcLICENSE\n \u2523 \ud83d\udcdcpackage.json\n \u2523 \ud83d\udcdcREADME.md\n \u2523 \ud83d\udcdctsconfig.json\n \u2517 \ud83d\udcdcyarn.lock\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"template")," directory houses the files that grit will scaffold out when you run it."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Transpile the typescript ",(0,o.kt)("inlineCode",{parentName:"p"},"generator.ts")," file into ",(0,o.kt)("inlineCode",{parentName:"p"},"generator.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build\n# compiles the `generator.ts` file into generator.js\nyarn build\n# To run script with yarn use this instead\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Run the generator")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"grit ./ ../grit-example-output\n")),(0,o.kt)("p",null,"Here you see the file structure of the output matches the contents of the template directory since we are not performing any other actions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," \u2523 \ud83d\udcdc.gitignore\n \u2523 \ud83d\udcdcLICENSE\n \u2517 \ud83d\udcdcREADME.md\n")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is the generator.ts file that we created above with grit-generator")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Generator, GeneratorConfig } from 'gritenv'\nimport path from 'path'\n\nconst config = { \n prompts(grit) {\n      this.input({\n        name: 'name',\n        message: 'What is the name of the project',\n        default: path.basename(grit.outDir),\n        filter: val => val.toLowerCase(),\n      })\n      this.input({\n        name: 'description',\n        message: 'How would you describe the project',\n        default: `my awesome new grit-generator`\n      })\n      this.input({\n        name: 'username',\n        message: 'What is your GitHub username',\n        default: grit.gitUser.username || grit.gitUser.name,\n        filter: val => val.toLowerCase(),\n        store: true\n      })\n      this.input({\n        name: 'email',\n        message: 'What is your email?',\n        default: grit.gitUser.email,\n        store: true\n      })\n      this.input({\n        name: 'website',\n        message: 'The URL of your website',\n        default(answers) {\n          return `github.com/${answers.username}`\n        },\n        store: true\n      })\n  },\n plugins: {\n  mergeFiles: []\n },\n  actions() {\n    this.add({ \n      files: '**',\n    })\n    this.move({\n      patterns: {\n        gitignore: '.gitignore',\n        '_package.json': 'package.json'\n      }\n    })\n },\n  async completed(grit) {\n    grit.gitInit()\n    await grit.npmInstall()\n    grit.showProjectTips()\n  }\n} as GeneratorConfig\n\nexport = new Generator(config)\n")),(0,o.kt)("p",null,"This example demonstrates a few key concepts that are required for creating generators. You see the main export has a three main items"),(0,o.kt)("h4",{id:"prompts"},"prompts"),(0,o.kt)("p",null,"The prompts function you see above returns an array of 5 prompt objects."))}m.isMDXComponent=!0}}]);