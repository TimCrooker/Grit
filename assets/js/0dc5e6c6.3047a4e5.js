"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[635],{6327:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var i=n(7462),l=n(3366),r=(n(7294),n(3905)),a=["components"],o={sidebar_position:4},s="Generator Instance",u={unversionedId:"generator-instance",id:"generator-instance",isDocsHomePage:!1,title:"Generator Instance",description:"The generator instance is availiable in methods of the generator file via the this keyword which gives you access to all of the following properties and methods.",source:"@site/docs/generator-instance.md",sourceDirName:".",slug:"/generator-instance",permalink:"/Grit/docs/generator-instance",editUrl:"https://github.com/TimCrooker/Grit/edit/master/docs/docs/generator-instance.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Scaffold Generator Template",permalink:"/Grit/docs/scaffold-generator-template"},next:{title:"Advanced Usage",permalink:"/Grit/docs/advanced-usage"}},p=[{value:"Properties",id:"properties",children:[{value:"answers",id:"answers",children:[],level:3},{value:"data",id:"data",children:[],level:3},{value:"pkg",id:"pkg",children:[],level:3},{value:"gitUser",id:"gituser",children:[],level:3},{value:"outDirName",id:"outdirname",children:[],level:3},{value:"outDir",id:"outdir",children:[],level:3},{value:"npmClient",id:"npmclient",children:[],level:3},{value:"logger",id:"logger",children:[],level:3},{value:"spinner",id:"spinner",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"gitInit",id:"gitinit",children:[],level:3},{value:"gitCommit",id:"gitcommit",children:[],level:3},{value:"npmInstall",id:"npminstall",children:[],level:3},{value:"runScript",id:"runscript",children:[],level:3},{value:"showProjectTips",id:"showprojecttips",children:[],level:3},{value:"createError",id:"createerror",children:[],level:3},{value:"getOutputFiles",id:"getoutputfiles",children:[],level:3},{value:"hasOutputFile",id:"hasoutputfile",children:[],level:3},{value:"readOutputFile",id:"readoutputfile",children:[],level:3}],level:2}],d={toc:p};function c(e){var t=e.components,n=(0,l.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"generator-instance"},"Generator Instance"),(0,r.kt)("p",null,"The generator instance is availiable in methods of the generator file via the ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," keyword which gives you access to all of the following properties and methods."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"answers"},"answers"),(0,r.kt)("p",null,"The answers to prompts. Cannot be accessing inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"prompts")," in the generator."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"{[k: string]: any | undefined}"))),(0,r.kt)("h3",{id:"data"},"data"),(0,r.kt)("p",null,"A merged object combining the answers and any data returned from the ",(0,r.kt)("a",{parentName:"p",href:"/Grit/docs/data"},"data method")," of the generator"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"{[k: string]: any | undefined}"))),(0,r.kt)("h3",{id:"pkg"},"pkg"),(0,r.kt)("p",null,"Read the contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file from the output directory. Will return undefined if it does not exist"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"{[k: string]: any | undefined}"))),(0,r.kt)("h3",{id:"gituser"},"gitUser"),(0,r.kt)("p",null,"The machines global git user config"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"{name: string, username: string, email: string}"))),(0,r.kt)("h3",{id:"outdirname"},"outDirName"),(0,r.kt)("p",null,"The basename of the output directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"string"))),(0,r.kt)("h3",{id:"outdir"},"outDir"),(0,r.kt)("p",null,"The absolute path to the output directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"string"))),(0,r.kt)("h3",{id:"npmclient"},"npmClient"),(0,r.kt)("p",null,"The users npm client"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"npm | yarn"))),(0,r.kt)("h3",{id:"logger"},"logger"),(0,r.kt)("p",null,"The logger instance for logging messages to the user with useful featureSvg"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("a",{parentName:"li",href:"/Grit/docs/logger"},"Logger"))),(0,r.kt)("h3",{id:"spinner"},"spinner"),(0,r.kt)("p",null,"The spinner instance"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/sindresorhus/ora"},"Ora"))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"gitinit"},"gitInit"),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"git init")," in the output directory synchronously"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"() => void"))),(0,r.kt)("h3",{id:"gitcommit"},"gitCommit"),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"git Commit -m '[message]'")," in the output directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"(commitMessage?: string) => Promise<void>"))),(0,r.kt)("h3",{id:"npminstall"},"npmInstall"),(0,r.kt)("p",null,"Installs dependencies in the output directory with preferred npm client"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"InstallPackages"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type InstallPackages = (opts: InstallOptions) => Promise<{ code: number }>\n\ninterface InstallOptions {\n    /** Install directory */\n    cwd: string\n    /** Package manager being used */\n    npmClient?: NPM_CLIENT\n    /** Package manager install CLI options */\n    installArgs?: string[]\n    /** Names of additional packages to install */\n    packages?: string[]\n    /** Run install as devDependencies */\n    saveDev?: boolean\n    registry?: string\n}\n")),(0,r.kt)("h3",{id:"runscript"},"runScript"),(0,r.kt)("p",null,"Runs an npm script in the output directories package.json file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"RunScript"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type RunScript = (opts: RunNpmScriptOptions) => Promise<void>\n\ninterface RunNpmScriptOptions {\n    /** the path to the directory commands will run in*/\n    cwd?: string\n    /** name of script from package.json to run */\n    script: string\n    /** Package manager being used */\n    npmClient?: NPM_CLIENT\n    /** Argunemets to be appended to the command line */\n    args?: string[]\n}\n")),(0,r.kt)("h3",{id:"showprojecttips"},"showProjectTips"),(0,r.kt)("p",null,"Show the user a success message"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"() => void"))),(0,r.kt)("h3",{id:"createerror"},"createError"),(0,r.kt)("p",null,"Throw errors more elegantly with better logging of the error stack"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"(message: string) => GritError"))),(0,r.kt)("h3",{id:"getoutputfiles"},"getOutputFiles"),(0,r.kt)("p",null,"Get a list of the files in the output directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"() => Promise<string[]>"))),(0,r.kt)("h3",{id:"hasoutputfile"},"hasOutputFile"),(0,r.kt)("p",null,"Check if a specific file exists in the output directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"(file: string) => Promise<boolean>"))),(0,r.kt)("h3",{id:"readoutputfile"},"readOutputFile"),(0,r.kt)("p",null,"Get the stringified content of a specific file in the output directory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"(file: string) => Promise<string>"))))}c.isMDXComponent=!0}}]);